// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  ownedEvents Event[] @relation("EventOwner")
  collaborations EventCollaborator[]

  @@map("users")
}

model Event {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  isPublic  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  ownerId String
  owner   User   @relation("EventOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  
  images        EventImage[]
  collaborators EventCollaborator[]

  @@map("events")
}

model EventImage {
  id        String   @id @default(cuid())
  url       String
  filename  String
  createdAt DateTime @default(now())

  // Relations
  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("event_images")
}

model EventCollaborator {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Relations
  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@map("event_collaborators")
}
